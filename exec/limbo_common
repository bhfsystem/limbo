#!/usr/bin/env bash

TMPDIR="${BASEBOX_CACHE}/tmp"
mkdir -p "$TMPDIR"

function box_main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"

  export VAGRANT_CWD="$shome${BASEBOX_INSTANCE:+/instance/${BASEBOX_INSTANCE}}"
  
  if [[ "$VAGRANT_CWD" != "$shome" ]]; then
    mkdir -p "$VAGRANT_CWD"
    ln -nfs "$shome/Vagrantfile" "$VAGRANT_CWD/"
    ln -nfs "$shome/script" "$VAGRANT_CWD/"
    ln -nfs "$shome/.ssh" "$VAGRANT_CWD/"
  fi 

  if [[ "$#" == 0 ]]; then
    echo "$(basename "$0"): up|destroy ssh|rsync|scp id media build export rebuild"
    return 0
  fi

  local nm_action="$1"; shift
  local nm_guest=
  local cmd_guest=
  local nm_rebuilder=

  local nm_basebox_build=
  local basebox_type=

  if [[ "$nm_action" =~ ^"${BOX_NAME}"[0-9]*$ ]]; then
    export VAGRANT_DEFAULT_PROVIDER="docker"
    nm_guest="$nm_action"
    nm_action="$1"; shift
    set -- "$nm_guest" "$@"
  fi 

  case "$VAGRANT_DEFAULT_PROVIDER" in
    vmware_fusion)
      nm_guest='osx'
      cmd_guest="limbo osx"
      nm_rebuilder='vmware'

      nm_basebox_build='osx'
      basebox_type='vmx'
      ;;
    virtualbox)
      nm_guest="${BASEBOX_NAME}"
      cmd_guest="limbo"
      nm_rebuilder='virtualbox'

      nm_basebox_build='ubuntu'
      basebox_type='ovf'
      ;;
    docker)
      nm_guest="$1"; shift
      cmd_guest="limbo $nm_guest"
      nm_rebuilder='docker'

      export DOCKER_HOST="tcp://${BASEBOX_DOCKER_NETWORK_PREFIX}.${BASEBOX_DOCKER_OCTET:-1}:2375"
      ;;
    aws)
      nm_guest="$AWS_DEFAULT_PROFILE"
      cmd_guest="$nm_guest"
      nm_rebuilder="aws"
      ;;
    *)
      echo "ERROR: unknown provider $VAGRANT_DEFAULT_PROVIDER" 1>&2
      return 1
      ;;
  esac

  case "$nm_action" in
    media)
      case "$nm_rebuilder" in
        virtualbox|vmware)
          $cmd_guest destroy -f
          $nm_rebuilder build "$nm_basebox_build"
          $nm_rebuilder remove 2>&- || true
          $nm_rebuilder add
          ;;
        aws)
          $cmd_guest destroy -f
          $nm_rebuilder build "$AWS_DEFAULT_PROFILE"
          $nm_rebuilder remove "$AWS_DEFAULT_PROFILE" 2>&- || true
          $nm_rebuilder add "$AWS_DEFAULT_PROFILE"
          ;;
        docker)
          if [[ "$nm_guest" == "${BOX_NAME}" ]]; then
            export BASEBOX_SOURCE="ubuntu:trusty"
            export BASEBOX_TAG="packer"
            $nm_rebuilder build "$BASEBOX_SOURCE"
          else
            export BASEBOX_TAG="vagrant"
            docker commit "$(limbo ${BOX_NAME} id)" "${BASEBOX_NAME}:${BASEBOX_TAG}"
          fi
          ;;
      esac
      ;;
    export)
      local nm_export="${1:-}"
      local nm_suffix="${nm_export:+-${nm_export}}"
      case "$nm_rebuilder" in
        virtualbox)
          cat "${BASEBOX_CACHE}/.ssh/ssh-vagrant.pub" | $cmd_guest ssh tee -a '~ubuntu/.ssh/authorized_keys'
          $cmd_guest ssh sudo rm -rf /dev/.udev
          $cmd_guest ssh sudo rm -f /lib/udev/rules.d/75-persistent-net-generator.rules
          $cmd_guest ssh sudo rm -rf /var/lib/dhcp # TODO assumes only leases are here
          $cmd_guest ssh sudo mkdir -p /var/lib/dhcp
          $cmd_guest halt

          (set +f; rm -f "${BASEBOX_CACHE}/box/${BASEBOX_NAME}${nm_suffix}.ovf" ${BASEBOX_CACHE}/box/${BASEBOX_NAME}${nm_suffix}-disk*.vmdk)
          (set -x; VBoxManage export $($cmd_guest id) --ovf20 -o "${BASEBOX_CACHE}/box/${BASEBOX_NAME}${nm_suffix}.ovf")
          ;;
        vmware)
          $cmd_guest halt
          ;;
        docker)
          if [[ "$nm_guest" == "${BOX_NAME}" ]]; then
            docker commit "$($cmd_guest id)" "${BASEBOX_NAME}:vagrant"
          fi
          ;;
      esac
      ;;
    import)
      local nm_import="${1:-}"
      local nm_suffix="${nm_import:+-${nm_import}}"
      case "$nm_rebuilder" in
        docker)
          docker load -i "${BASEBOX_CACHE}/box/${BASEBOX_NAME}.docker"
          ;;
        virtualbox)
          $nm_rebuilder remove 2>&- || true
          $nm_rebuilder add
          ;;
      esac
      ;;
    rebuild)
      local nm_export="${1:-}"
      local nm_suffix="${nm_export:+-${nm_export}}"
      case "$nm_rebuilder" in
        virtualbox|vmware)
          case "$nm_rebuilder" in
            vmware)
              export BASEBOX_SOURCE="$($cmd_guest id)"
              ;;
            virtualbox)
              export BASEBOX_SOURCE="${BASEBOX_CACHE}/box/${BASEBOX_NAME}${nm_suffix}.ovf"
              ;;
          esac

          $nm_rebuilder build "$nm_basebox_build" "$basebox_type" "$nm_export" "$@"
          $cmd_guest destroy -f
          $nm_rebuilder remove 2>&- || true
          $nm_rebuilder add

          rm -f "$shome/cidata/meta-data"
          (cd $shome && make)
          ;;
        docker)
          export BASEBOX_SOURCE="${BASEBOX_NAME}:vagrant"
          if [[ "$nm_guest" == "${BOX_NAME}" ]]; then
            export BASEBOX_TAG="vagrant"
            $nm_rebuilder build
            docker images -a
            docker history "$BASEBOX_SOURCE" || true
            docker save -o "${BASEBOX_CACHE}/box/${BASEBOX_NAME}${nm_suffix}.docker" "$BASEBOX_SOURCE"
            docker history "$BASEBOX_SOURCE"
          fi
          ;;
      esac
      $cmd_guest destroy -f
      exec $cmd_guest up
      ;;
    up)
      exec parity "$nm_action" "$nm_guest" "$@"
      ;;
    destroy)
      exec vagrant "$nm_action" "$nm_guest" "$@"
      ;;
    ssh|rsync|scp)
      exec parity "$nm_action" "$nm_guest" "$@"
      ;;
    id)
      cat "$(set +f; ls -td "$VAGRANT_CWD/.vagrant/machines/$nm_guest"/*/id | head -1)"; echo
      ;;
    build)
      exec $cmd_guest up
      ;;
    remote)
      local quoted=()
      while [[ "$#" -gt 0 ]]; do
        if [[ -n "$1" ]]; then
          quoted+=($(printf '%q' "$1"))
        else
          quoted+=("''")
        fi
        shift
      done
      exec parity ssh "$nm_guest" "${quoted[@]}"
      ;;
    snapshot)
      exec vagrant "$nm_action" "$@"
      ;;
    env)
      env
      ;;
    *)
      exec vagrant "$nm_action" "$nm_guest" "$@"
      ;;
  esac
}
