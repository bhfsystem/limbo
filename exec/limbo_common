#!/usr/bin/env bash

TMPDIR="${CACHE_DIR}/tmp"

function box_main {
  if [[ -x "$(which "limbo-${1:-}" 2>&- || true)" ]]; then
    exec limbo "$@"
  fi

  local shome="${_limbo_home:-"$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"}"
  source "$shome/script/profile"

  if [[ "$#" == 0 ]]; then
    echo "$(basename "$0"): up|destroy ssh|rsync|scp id media build export rebuild"
    return 0
  fi

  local nm_action="$1"; shift
  local nm_guest=
  local cmd_limbo=
  local cmd_basebox=
  local basebox_type=

  case "$VAGRANT_DEFAULT_PROVIDER" in
    vmware*)
      nm_guest="${BASEBOX_NAME}"
      cmd_limbo="limbo vmware"
      cmd_basebox='basebox vmware'

      basebox_type='vmx'
      ;;
    virtualbox)
      nm_guest="${BASEBOX_NAME}"
      cmd_limbo="limbo virtualbox"
      cmd_basebox='basebox virtualbox'

      basebox_type='ovf'
      ;;
    parallels)
      nm_guest="${BASEBOX_NAME}"
      cmd_limbo="limbo parallels"
      cmd_basebox='basebox parallels'

      basebox_type='pvm'
      ;;
    docker)
      nm_guest="${BASEBOX_NAME}"
      cmd_limbo="limbo docker image"
      cmd_basebox='basebox docker'
      ;;
    aws)
      nm_guest="${BASEBOX_NAME}"
      cmd_limbo="limbo aws"
      cmd_basebox="basebox aws"
      ;;
    *)
      echo "ERROR: unknown provider $VAGRANT_DEFAULT_PROVIDER" 1>&2
      return 1
      ;;
  esac

  export VAGRANT_CWD="$shome${BASEBOX_INSTANCE:+/instance/${BASEBOX_INSTANCE}}-${VAGRANT_DEFAULT_PROVIDER}"
  
  if [[ "$VAGRANT_CWD" != "$shome" ]]; then
    mkdir -p "$VAGRANT_CWD"
    ln -nfs "$shome/Vagrantfile" "$VAGRANT_CWD/"
    ln -nfs "$shome/script" "$VAGRANT_CWD/"
    ln -nfs "$shome/.ssh" "$VAGRANT_CWD/"
  fi 

  case "$nm_action" in
    media)
      case "$VAGRANT_DEFAULT_PROVIDER" in
        virtualbox|parallels|vmware*)
          env LIMBO_FAKE=1 $cmd_limbo destroy -f
          $cmd_basebox build
          $cmd_basebox remove -f 2>&- || true
          $cmd_basebox add
          ;;
        aws)
          env LIMBO_FAKE=1 $cmd_limbo destroy -f
          $cmd_basebox build
          $cmd_basebox remove -f 2>&- || true
          $cmd_basebox add
          ;;
        docker)
          export BASEBOX_SOURCE="ubuntu:trusty"
          export BASEBOX_TAG="packer"
          $cmd_basebox build "$BASEBOX_SOURCE"
          docker save -o "${CACHE_DIR}/box/${BASEBOX_NAME}-${BASEBOX_TAG}.docker" "$BASEBOX_NAME:$BASEBOX_TAG"
          ;;
      esac
      ;;
    export)
      local nm_export="${1:-}"
      local nm_suffix="${nm_export:+-${nm_export}}"
      case "$VAGRANT_DEFAULT_PROVIDER" in
        virtualbox)
          cat "${CACHE_DIR}/.ssh/ssh-vagrant.pub" | $cmd_limbo ssh tee -a '~ubuntu/.ssh/authorized_keys'
          $cmd_limbo ssh sudo rm -rf /dev/.udev
          $cmd_limbo ssh sudo rm -f /lib/udev/rules.d/75-persistent-net-generator.rules
          $cmd_limbo ssh sudo rm -rf /var/lib/dhcp # TODO assumes only leases are here
          $cmd_limbo ssh sudo mkdir -p /var/lib/dhcp
          $cmd_limbo halt

          (set +f; rm -f "${CACHE_DIR}/box/${BASEBOX_NAME}${nm_suffix}.ovf" ${CACHE_DIR}/box/${BASEBOX_NAME}${nm_suffix}-disk*.vmdk)
          (set -x; VBoxManage export $($cmd_limbo id) --ovf20 -o "${CACHE_DIR}/box/${BASEBOX_NAME}${nm_suffix}.ovf")
          ;;
        vmware*)
          $cmd_limbo halt
          ;;
        aws)
          local id_ami="$(aws ec2 create-image --name "${BASEBOX_NAME}-vagrant-$(aws configure get region)-$(hostname -s)-$(date +%s)" --description "vagrant export to packer rebuild" --instance-id $($cmd_limbo id) --no-reboot | jq -r '.ImageId')"
          while true; do 
            local state="$(aws ec2 describe-images --image-id "$id_ami" | jq -r '.Images[].State')"
            case "$state" in
              available)
                break
                ;;
              pending)
                echo "INFO: waiting for ami $id_ami... $(date)"
                sleep 15
                continue
                ;;
              *)
                echo "ERROR: unknown state '$state' while waiting for ami $id_ami" 1>&2
                return 1
                ;;
            esac
          done
          ;;
        docker)
          docker commit "$($cmd_limbo id)" "${BASEBOX_NAME}:vagrant"
          ;;
      esac
      ;;
    import)
      local nm_import="${1:-}"
      local nm_suffix="${nm_import:+-${nm_import}}"
      case "$VAGRANT_DEFAULT_PROVIDER" in
        docker)
          docker load -i "${CACHE_DIR}/box/${BASEBOX_NAME}${nm_suffix}.docker"
          ;;
        virtualbox)
          $cmd_basebox remove -f 2>&- || true
          $cmd_basebox add
          ;;
      esac
      ;;
    recycle)
      $cmd_limbo destroy -f 2>&- || true
      $cmd_limbo build "$@"
      ;;
    refresh)
      $cmd_limbo "${1:-provision}"
      $cmd_limbo reuse
      ;;
    reuse)
      $cmd_limbo export "$@"
      $cmd_limbo repackage "$@"
      ;;
    rebase)
      $cmd_limbo media
      env BASEBOX_SOURCE="${BASEBOX_NAME}:packer" $cmd_limbo build "$@"
      ;;
    repackage)
      local nm_export="${1:-}"
      local nm_suffix="${nm_export:+-${nm_export}}"
      case "$VAGRANT_DEFAULT_PROVIDER" in
        virtualbox|vmware*)
          case "$VAGRANT_DEFAULT_PROVIDER" in
            vmware*)
              export BASEBOX_SOURCE="$($cmd_limbo id)"
              ;;
            virtualbox)
              export BASEBOX_SOURCE="${CACHE_DIR}/box/${BASEBOX_NAME}${nm_suffix}.ovf"
              ;;
          esac

          $cmd_basebox build "$basebox_type" "$nm_export" "$@"
          $cmd_limbo destroy -f
          $cmd_basebox remove -f 2>&- || true
          case "$VAGRANT_DEFAULT_PROVIDER" in
            virtualbox)
              VBoxManage list vms | cut -d'"' -f2 | runmany 'VBoxManage unregistervm --delete $1'
              ;;
          esac
          $cmd_basebox add

          rm -f "$shome/cidata/meta-data"
          (cd $shome && make)
          ;;
        aws)
          export EC2_SOURCE_AMI="$(\
            aws ec2 describe-images --filter Name=name,Values="${BASEBOX_NAME}-vagrant-$(aws configure get region)"'-*' --owners self \
            | jq -r '.Images | sort_by(.CreationDate)[] | select(.State != "failed") | .ImageId' \
            | tail -1
          )"
          $cmd_basebox build
          $cmd_limbo destroy -f
          $cmd_basebox remove -f 2>&- || true
          $cmd_basebox add
          ;;
         docker)
          export BASEBOX_SOURCE="${BASEBOX_NAME}:vagrant"
          export BASEBOX_TAG="vagrant"
          $cmd_basebox build
          docker save -o "${CACHE_DIR}/box/${BASEBOX_NAME}${nm_suffix}.docker" "$BASEBOX_SOURCE"
          ;;
      esac
      ;;
    up)
      exec parity "$nm_action" "$nm_guest" "$@"
      ;;
    destroy)
      exec vagrant "$nm_action" "$nm_guest" "$@"
      ;;
    ssh|rsync|scp)
      exec parity "$nm_action" "$nm_guest" "$@"
      ;;
    sync)
      if [[ "$#" == 0 ]]; then
        local pth_packages="${CACHE_DIR}/packages/"$(echo "$(parity ssh "$nm_guest" uname -s)_$(parity ssh "$nm_guest" uname -r | cut -d- -f1 | cut -d. -f1-3)${PKG_HOME}" | tr / _ | tr . _ | perl -pe 's{__+}{_}')""
        set -- "$pth_packages"
      fi

      for pth_packages in "$@"; do
        parity "ssh" "$nm_guest" sudo install -d -o ubuntu -g ubuntu "$pth_packages"
        parity "rsync" "$nm_guest" -ia --delete --progress "$pth_packages/." "${nm_guest}:$pth_packages/"
      done
      ;;
    id)
      cat "$(set +f; ls -td "$VAGRANT_CWD/.vagrant/machines/$nm_guest"/*/id | head -1)"; echo
      ;;
    build)
      $cmd_limbo up --no-provision "$@"
      case "$VAGRANT_DEFAULT_PROVIDER" in
        aws)
          $cmd_limbo sync
          ;;
      esac
      $cmd_limbo provision
      ;;
    remote)
      local quoted=()
      while [[ "$#" -gt 0 ]]; do
        if [[ -n "$1" ]]; then
          quoted+=($(printf '%q' "$1"))
        else
          quoted+=("''")
        fi
        shift
      done
      exec parity ssh "$nm_guest" "${quoted[@]}"
      ;;
    snapshot|box)
      exec vagrant "$nm_action" "$@"
      ;;
    *)
      exec vagrant "$nm_action" "$nm_guest" "$@"
      ;;
  esac
}
